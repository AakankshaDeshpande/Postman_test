{
	"info": {
		"_postman_id": "07b28662-9fa8-42fe-a05b-3cb828d809a8",
		"name": "Hackathon Personal",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34648013"
	},
	"item": [
		{
			"name": "Admin Login",
			"item": [
				{
					"name": "Bearer token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(pm.response.text());\r",
									"pm.environment.set(\"Admintoken_env\",jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"Team8@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Dietician Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 201\",() =>\r",
									"{\r",
									"    pm.response.to.have.status(201);\r",
									"}\r",
									");\r",
									"\r",
									"pm.test(\"Check deticianid present in the response body\",() =>\r",
									"{\r",
									"   var jsonData = JSON.parse(pm.response.text());\r",
									"   pm.environment.set(\"DieticianID_env\",jsonData.id);\r",
									"   pm.environment.set(\"DieticianPWD_env\",jsonData.loginPassword);\r",
									"   pm.environment.set(\"DieticianEmail_env\",jsonData.Email);\r",
									"}\r",
									");\r",
									"\r",
									"commontests.postPutHeaderTest();\r",
									"commontests.postPutCommonTests();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random phone number\r",
									"/* Function to generate a random 10-digit phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const firstDigit = Math.floor(6 + Math.random() * 4); \r",
									"    // ensures the first digit is between 6 and 9\r",
									"    const remainingDigits = Math.floor(100000000 + Math.random() * 900000000); \r",
									"    // ensures the remaining digits are between 100000000 and 999999999\r",
									"    return `${firstDigit}${remainingDigits}`;\r",
									"}\r",
									"\r",
									"// Generate a random phone number\r",
									"const randomPhoneNumberdiet = getRandomPhoneNumber();\r",
									"// Set the random phone number as an environment variable\r",
									"pm.environment.set(\"RandomPhoneNumberDiet\", randomPhoneNumberdiet);*/\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"var useremail = \"ju\"+random+\"@gmail.com\";\r",
									"\r",
									"pm.environment.set(\"email_env\", useremail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{email_env}}\",\r\n  \"Firstname\": \"{{$randomFirstName}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{$randomLastName}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(pm.response.text());\r",
									"\r",
									"pm.test(\"Check dieticianId present in the response body\",() =>\r",
									"{\r",
									"   \r",
									"   pm.environment.set(\"DieticianID_env\",jsonData.id);\r",
									"   pm.environment.set(\"DieticianPWD_env\",jsonData.loginPassword);\r",
									"   pm.environment.set(\"DieticianEmail_env\",jsonData.Email);\r",
									"}\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"9339872988\",\r\n  \"DateOfBirth\": \"2018-02-26T18:14:08.570Z\",\r\n  \"Education\": \"Bachelors\",\r\n  \"Email\": \"Sanjeev@gmail.com\",\r\n  \"Firstname\": \"Kapoor\",\r\n  \"HospitalCity\": \"mumbai\",\r\n  \"HospitalName\": \"mumbai\",\r\n  \"HospitalPincode\": \"111111\",\r\n  \"HospitalStreet\": \"mumbai\",\r\n  \"Lastname\": \"Sanjeev\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "JsonCreateDiet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve iteration data\r",
									"let requestData = pm.iterationData.toJSON();\r",
									"console.log(\"Iteration Data (raw):\", requestData);\r",
									"\r",
									"// Check if requestData is an array and has items\r",
									"if (Array.isArray(requestData) && requestData.length > 0) {\r",
									"    // Iterate over the array to find the dietician data\r",
									"    for (let item of requestData) {\r",
									"        if (item.dietician) {\r",
									"            // Convert dietician data to JSON string\r",
									"            let dieticianData = item.dietician;\r",
									"            let jsonData = JSON.stringify(dieticianData);\r",
									"            pm.environment.set(\"DieticianData\", jsonData);\r",
									"            console.log(\"DieticianData:\", jsonData);\r",
									"            break; // Exit loop after finding the first dietician data\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Iteration Data is not in an expected format or is empty\");\r",
									"}\r",
									"\r",
									"// Verify environment variable\r",
									"let dieticianData = pm.environment.get(\"DieticianData\");\r",
									"console.log(\"Environment Variable DieticianData:\", dieticianData);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{DieticianData}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/349",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"349"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admintoken_env}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Dietician Login",
			"item": [
				{
					"name": "DieticianBearerToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Log the environment variables\r",
									"console.log(\"Password:\", pm.environment.get(\"DieticianPWD_env\"));\r",
									"console.log(\"Email:\", pm.environment.get(\"DieticianEmail_env\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(pm.response.text());\r",
									"pm.environment.set(\"DieticianBearerToken_env\",jsonData.token);\r",
									"\r",
									"// Log the response\r",
									"console.log(\"Response:\", pm.response.text());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admintoken_env}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\":\"{{DieticianPWD_env}}\",\r\n  \"userLoginEmail\":\"{{DieticianEmail_env}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"date_Of_Birth\");\r",
									"pm.environment.unset(\"LastName\");\r",
									"pm.environment.unset(\"ContactNumber\");\r",
									"pm.environment.unset(\"Email\");\r",
									"pm.environment.unset(\"Allergy\");\r",
									"pm.environment.unset(\"FoodPreference\");\r",
									"pm.environment.unset(\"CuisineCategory\");\r",
									"pm.environment.unset(\"DateOfBirth\");\r",
									"\r",
									"pm.environment.unset(\"RandomPhoneNumber\");\r",
									"pm.environment.unset(\"Patientemail_env\");\r",
									"pm.environment.unset(\"DateOf\");\r",
									"pm.environment.unset(\"Birthday\");\r",
									"pm.environment.unset(\"RandomPhoneNumberDiet\");\r",
									"pm.environment.unset(\"email_env\");\r",
									"pm.environment.unset(\"FirstName\");\r",
									"\r",
									"pm.environment.unset(\"hospital_City\");\r",
									"pm.environment.unset(\"Email\");\r",
									"pm.environment.unset(\"hospital_Street\");\r",
									"pm.environment.unset(\"last_name\");\r",
									"pm.environment.unset(\"patientInfo\");\r",
									"pm.environment.unset(\"randomPhoneNumber\");\r",
									"\r",
									"\r",
									"pm.environment.unset(\"education\");\r",
									"pm.environment.unset(\"PatientID_env\");\r",
									"pm.environment.unset(\"hospital_Street\");\r",
									"pm.environment.unset(\"Fileid_env\");\r",
									"pm.environment.unset(\"contact_Number\");\r",
									"pm.environment.unset(\"hospital_Pincode\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DieticianBearerToken_env}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/501",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"patient",
								"501"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code 201\",() =>\r",
									"{\r",
									"    pm.response.to.have.status(201);\r",
									"}\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(pm.response.text());\r",
									"\r",
									"pm.test(\"Check patientID present in the response body\",() =>\r",
									"{\r",
									"   \r",
									"   pm.environment.set(\"PatientID_env\",jsonData.patientId);\r",
									"   \r",
									"}\r",
									");\r",
									"\r",
									"var fileid = Object.keys(jsonData.FileMorbidity)[0];\r",
									"\r",
									"\r",
									"pm.environment.set(\"Fileid_env\", fileid);\r",
									"\r",
									"//console.log(pm.response.text());\r",
									"\r",
									"\r",
									"//console.log(\"Extracted morbidity key:\", fileid);\r",
									"//console.log(\"JSONDATA:\", jsonData.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestData = pm.iterationData.toJSON();\r",
									"console.log(\"Iteration Data (raw):\", requestData);\r",
									"\r",
									"// Check if requestData is an object with `values` array\r",
									"if (requestData && Array.isArray(requestData.values)) {\r",
									"    // Convert the values array to an object\r",
									"    let dataObject = {};\r",
									"    requestData.values.forEach(item => {\r",
									"        if (item.key && item.value) {\r",
									"            dataObject[item.key] = item.value;\r",
									"        }\r",
									"    });\r",
									"\r",
									"    requestData = dataObject;\r",
									"    console.log(\"Adjusted Data Object:\", requestData);\r",
									"}\r",
									"\r",
									"// Check if `requestData` is still an object and log fields\r",
									"if (typeof requestData === 'object' && !Array.isArray(requestData)) {\r",
									"    console.log(\"Data is an object.\");\r",
									"    console.log(\"FirstName:\", requestData.FirstName);\r",
									"    console.log(\"LastName:\", requestData.LastName);\r",
									"    console.log(\"ContactNumber:\", requestData.ContactNumber);\r",
									"    console.log(\"Email:\", requestData.Email);\r",
									"    console.log(\"Allergy:\", requestData.Allergy);\r",
									"    console.log(\"FoodPreference:\", requestData.FoodPreference);\r",
									"    console.log(\"CuisineCategory:\", requestData.CuisineCategory);\r",
									"    console.log(\"DateOfBirth:\", requestData.DateOfBirth);\r",
									"} else {\r",
									"    console.error(\"Data is not in the expected format.\");\r",
									"}\r",
									"\r",
									"//Extract the DateOfBirth field from requestData\r",
									"let dateString = requestData.DateOfBirth; \r",
									"// Assume DateOfBirth is in the raw format\r",
									"console.log(\"Raw DIMPLE DateOfBirth:\", dateString);\r",
									"\r",
									"// Set environment variables for further use\r",
									"pm.environment.set(\"FirstName\", requestData.FirstName);\r",
									"pm.environment.set(\"LastName\", requestData.LastName);\r",
									"pm.environment.set(\"ContactNumber\", requestData.ContactNumber);\r",
									"pm.environment.set(\"Email\", requestData.Email);\r",
									"pm.environment.set(\"Allergy\", requestData.Allergy);\r",
									"pm.environment.set(\"FoodPreference\", requestData.FoodPreference);\r",
									"pm.environment.set(\"CuisineCategory\", requestData.CuisineCategory);\r",
									"pm.environment.set(\"DateOfBirth\", dateString);\r",
									"\r",
									"// Construct and log patientInfo\r",
									"let patientInfo = {\r",
									"    FirstName: requestData.FirstName,\r",
									"    LastName: requestData.LastName,\r",
									"    ContactNumber: requestData.ContactNumber,\r",
									"    Email: requestData.Email,\r",
									"    Allergy: requestData.Allergy,\r",
									"    FoodPreference: requestData.FoodPreference,\r",
									"    CuisineCategory: requestData.CuisineCategory,\r",
									"    DateOfBirth: dateString\r",
									"};\r",
									"\r",
									"console.log(\"PatientInfo:\", patientInfo);\r",
									"\r",
									"pm.environment.set(\"patientInfo\", JSON.stringify(patientInfo));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DieticianBearerToken_env}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef4f977-6933-46b0-ad7b-b3e49d102351"
								},
								{
									"key": "file",
									"contentType": "",
									"type": "file",
									"src": "postman-cloud:///1ef503b2-89c5-4000-8c95-b71644c2a5ff",
									"disabled": true
								},
								{
									"key": "FirstName",
									"value": "{{FirstName}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "LastName",
									"value": "{{LastName}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ContactNumber",
									"value": "{{ContactNumber}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "Email",
									"value": "{{Email}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "Allergy",
									"value": "{{Allergy}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "FoodPreference",
									"value": "{{FoodPreference}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "CuisineCategory",
									"value": "{{CuisineCategory}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "DateOfBirth",
									"value": "{{DateOfBirth}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Patient Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"/*\r",
									"pm.test(\"Status code 201\",() =>\r",
									"{\r",
									"    pm.response.to.have.status(201);\r",
									"}\r",
									");*/\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse(pm.response.text());\r",
									"\r",
									"pm.test(\"Check patientID present in the response body\",() =>\r",
									"{\r",
									"   \r",
									"   pm.environment.set(\"PatientID_env\",jsonData.patientId);\r",
									"   \r",
									"}\r",
									");\r",
									"\r",
									"var fileid = Object.keys(jsonData.FileMorbidity)[0];\r",
									"\r",
									"\r",
									"pm.environment.set(\"Fileid_env\", fileid);\r",
									"\r",
									"//console.log(pm.response.text());\r",
									"\r",
									"\r",
									"//console.log(\"Extracted morbidity key:\", fileid);\r",
									"//console.log(\"JSONDATA:\", jsonData.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestData = pm.iterationData.toJSON();\r",
									"console.log(\"Iteration Data (raw):\", requestData);\r",
									"\r",
									"// Check if requestData is an object with `values` array\r",
									"if (requestData && Array.isArray(requestData.values)) {\r",
									"    // Convert the values array to an object\r",
									"    let dataObject = {};\r",
									"    requestData.values.forEach(item => {\r",
									"        if (item.key && item.value) {\r",
									"            dataObject[item.key] = item.value;\r",
									"        }\r",
									"    });\r",
									"\r",
									"    requestData = dataObject;\r",
									"    //console.log(\"Adjusted Data Object:\", requestData);\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//Extract the DateOfBirth field from requestData\r",
									"let dateString = requestData.DateOfBirth; \r",
									"// Assume DateOfBirth is in the raw format\r",
									"console.log(\"Raw DIMPLE DateOfBirth:\", dateString);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Function to format the DateOfBirth field\r",
									"function formatDate(dateString) {\r",
									"    let parts = dateString.split('-');\r",
									"    if (parts.length === 3) {\r",
									"        // Check if the format is DD-MM-YYYY and convert to YYYY-MM-DD\r",
									"        let day = parts[0];\r",
									"        let month = parts[1];\r",
									"        let year = parts[2];\r",
									"        return `${year}-${month}-${day}`;\r",
									"    } else {\r",
									"        let date = new Date(dateString);\r",
									"        if (isNaN(date.getTime())) {\r",
									"            console.error(\"Invalid Date Format:\", dateString);\r",
									"            return null;\r",
									"        }\r",
									"        let year = date.getFullYear();\r",
									"        let month = ('0' + (date.getMonth() + 1)).slice(-2);\r",
									"        let day = ('0' + date.getDate()).slice(-2);\r",
									"        return `${year}-${month}-${day}`;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Format the DateOfBirth field\r",
									"let formattedDateOfBirth = dateString ? formatDate(dateString) : null;\r",
									"console.log(\"Formatted DateOfBirth:\", formattedDateOfBirth);\r",
									"\r",
									"\r",
									"\r",
									"// Function to generate a random 10-digit phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const firstDigit = Math.floor(6 + Math.random() * 4); \r",
									"    // ensures the first digit is between 6 and 9\r",
									"    const remainingDigits = Math.floor(100000000 + Math.random() * 900000000); \r",
									"    // ensures the remaining digits are between 100000000 and 999999999\r",
									"    return `${firstDigit}${remainingDigits}`;\r",
									"}\r",
									"\r",
									"// Generate a random phone number\r",
									"const randomPhoneNumber = getRandomPhoneNumber();\r",
									"// Set the random phone number as an environment variable\r",
									"pm.environment.set(\"RandomPhoneNumber\", randomPhoneNumber);\r",
									"\r",
									"\r",
									"/////////\r",
									"//Function to generate a random email that starts with a letter\r",
									"function getRandomEmail() {\r",
									"    const randomString = Math.random().toString(36).substring(2, 10);\r",
									"     // Random string for the email\r",
									"    return `a${randomString}@gmail.com`; \r",
									"    // Ensure it starts with 'a' and use a common domain\r",
									"}\r",
									"\r",
									"// Generate a random email and set it as an environment variable\r",
									"var patientEmail = getRandomEmail();\r",
									"pm.environment.set(\"Patientemail_env\", patientEmail);\r",
									"console.log(\"Generated Patient Email:\", patientEmail);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Set environment variables for further use\r",
									"//pm.environment.set(\"Test\", requestData.Test);\r",
									"//pm.environment.set(\"FirstName\",requestData.FirstName);\r",
									"//pm.environment.set(\"LastName\", requestData.LastName);\r",
									"//pm.environment.set(\"ContactNumber\", requestData.ContactNumber);\r",
									"//pm.environment.set(\"Email\", requestData.Email);\r",
									"//pm.environment.set(\"Allergy\", requestData.Allergy);\r",
									"//pm.environment.set(\"FoodPreference\", requestData.FoodPreference);\r",
									"//pm.environment.set(\"CuisineCategory\", requestData.CuisineCategory);\r",
									"/////REMEMBER TO OPEN THIS\r",
									"\r",
									"//console.log(\"DATE OF BIRTHHHHHH NINA:\",formattedDateOfBirth);\r",
									"pm.environment.set(\"Birthday\", formattedDateOfBirth);\r",
									"///////////////\r",
									"\r",
									"// Construct and log patientInfo\r",
									"\r",
									"\r",
									"//console.log(\"Response Body:\", pm.response.text());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DieticianBearerToken_env}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n   \"FirstName\":\"{{$randomFirstName}}\",\n   \"LastName\":\"{{$randomFirstName}}\",\n   \"ContactNumber\":\"{{RandomPhoneNumber}}\",\n   \"Email\":\"{{Patientemail_env}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodPreference\":\"{{FoodPreference}}\",\n   \"CuisineCategory\":\"{{CuisineCategory}}\",\n   \"DateOfBirth\":\"{{Birthday}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef4f974-ada4-4810-b3df-d60215c36179"
								},
								{
									"key": "file",
									"contentType": "",
									"type": "file",
									"src": "postman-cloud:///1ef503b2-89c5-4000-8c95-b71644c2a5ff",
									"disabled": true
								},
								{
									"key": "FirstName",
									"value": "{{$randomFirstName}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "LastName",
									"value": "{{$randomLastName}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ContactNumber",
									"value": "{{ContactNumber}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "Email",
									"value": "{{Email}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "Allergy",
									"value": "{{Allergy}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "FoodPreference",
									"value": "{{FoodPreference}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "CuisineCategory",
									"value": "{{CuisineCategory}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								},
								{
									"key": "DateOfBirth",
									"value": "{{DateOfBirth}}",
									"contentType": "application/json",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"patient"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Patient Module",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "File",
			"item": []
		},
		{
			"name": "Negative",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commontests = {\r",
					"postPutHeaderTest: function() { \r",
					"    //test header presence\r",
					"    pm. test (\"Content-Type header is present\", () => {\r",
					"    pm.response.to.have.header (\"Content-Type\");\r",
					"    });\r",
					"\r",
					"    //test header content\r",
					"    pm.test (\"Content-Type header is application/json\", () => {\r",
					"    pm.expect (pm.response.headers.get ('Content-Type')) .to.include('application/json');\r",
					"    });\r",
					"},\r",
					"\r",
					"postPutCommonTests: function() {\r",
					"    //test response time\r",
					"        pm.test(\"Response time is less than 1000ms\", ()=> {\r",
					"        pm.expect (pm.response.responseTime).to.be.below(500);\r",
					"        });\r",
					"    }\r",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "contact_Number",
			"value": ""
		},
		{
			"key": "date_Of_Birth",
			"value": ""
		},
		{
			"key": "education",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "first_name",
			"value": ""
		},
		{
			"key": "hospital_City",
			"value": ""
		},
		{
			"key": "hospital_Name",
			"value": ""
		},
		{
			"key": "hospital_Pincode",
			"value": ""
		},
		{
			"key": "hospital_Street",
			"value": ""
		},
		{
			"key": "last_name",
			"value": ""
		},
		{
			"key": "DieticianID_env",
			"value": ""
		},
		{
			"key": "DieticianPWD_env",
			"value": ""
		}
	]
}