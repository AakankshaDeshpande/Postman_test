{
	"info": {
		"_postman_id": "f3d23f83-295f-4cd5-b0f9-201cbcd923db",
		"name": "Team9_TechSquad_Dietician_Hackathon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33885236",
		"_collection_link": "https://interstellar-star-412911.postman.co/workspace/Team9_TechSquad~c8dd5450-0c41-45e4-b990-1258a95038d8/collection/33885236-f3d23f83-295f-4cd5-b0f9-201cbcd923db?action=share&source=collection_link&creator=33885236"
	},
	"item": [
		{
			"name": "NonAuthorization-AllModules",
			"item": [
				{
					"name": "PatientModule",
					"item": [
						{
							"name": "CreatePatient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": " patientInfo",
											"value": " \n {\n \"FirstName\": \"Adam\",\n \"LastName\": \"Don\",\n \"ContactNumber\": \"2346631230\",\n \"Email\": \"Adam8989@gmail.com\",\n \"Allergy\": \"NONE\",\n \"FoodPreference\": \"Vegan\", \n\"CuisineCategory\":\"Indian\", \n\"DateOfBirth\": \"1989-08-09\"\n }\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f974-ada4-4810-b3df-d60215c36179"
										}
									]
								},
								"url": {
									"raw": "{{BaseUrl}}/patient",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllPatients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/patient",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Patients Morbidity Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/patient/testReports/{{patientId_env}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patient",
										"testReports",
										"{{patientId_env}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient file by FileId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/patient/testReports/viewFile/{{Fileid_env}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patient",
										"testReports",
										"viewFile",
										"{{Fileid_env}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"ufirstname\",\n\"LastName\": \"llastname\",\n\"ContactNumber\": \"9876543209\",\n\"Email\": \"test@gmail.com\",\n\"Allergy\": \"soy\",\n\"FoodPreference\": \"vegan\",\n\"CuisineCategory\":\"Andhra\",\n\"DateOfBirth\": \"1986-02-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef5051b-cd34-4470-a8bc-45b7d472999d"
										}
									]
								},
								"url": {
									"raw": "{{BaseUrl}}/patient/{{patientId_env}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patient",
										"{{patientId_env}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/patient/{{patientId_env}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patient",
										"{{patientId_env}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "EndToEndTesting-AllModules",
			"item": [
				{
					"name": "PatientModule(E2E)",
					"item": [
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dietician Module(E2E)",
					"item": [
						{
							"name": "CreateDieticianCSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 201\",() =>\r",
											"{\r",
											"    pm.response.to.have.status(201);\r",
											"}\r",
											");\r",
											"\r",
											"pm.test(\"Check deticianid present in the response body\",() =>\r",
											"{\r",
											"   var jsonData = JSON.parse(pm.response.text());\r",
											"   pm.environment.set(\"dieticianID_env\",jsonData.id);\r",
											"   pm.environment.set(\"dieticianPwd_env\",jsonData.loginPassword);\r",
											"   pm.environment.set(\"dieticianemail_env\",jsonData.Email);\r",
											"}\r",
											");\r",
											"\r",
											"commontests.postPutHeaderTest();\r",
											"commontests.postPutCommonTests();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Define the phone number format\r",
											"const phoneNumberFormat = '090#######';\r",
											"\r",
											"// Function to generate random digits, also defining how many digits to generate\r",
											"function getRandomDigit() {\r",
											"  return Math.floor(Math.random() * 10);\r",
											"}\r",
											"\r",
											"// Function to generate a phone number\r",
											"function generatePhoneNumber(format) {\r",
											"  let phoneNumber = '';\r",
											"  for (let i = 0; i < format.length; i++) {\r",
											"    const char = format[i];\r",
											"    if (char === '#') {\r",
											"      phoneNumber += getRandomDigit();\r",
											"    } else {\r",
											"      phoneNumber += char;\r",
											"    }\r",
											"  }\r",
											"  return phoneNumber;\r",
											"}\r",
											"\r",
											"// Set the random phone number as an environment variable\r",
											"pm.environment.set('randomPhoneNumber', generatePhoneNumber(phoneNumberFormat));\r",
											"\r",
											"var random = Math.random().toString(36).substring(2);\r",
											"var useremail = \"siri\"+random+\"@gmail.com\";\r",
											"\r",
											"pm.environment.set(\"email_env\", useremail);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admintoken_env}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{randomPhoneNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{email_env}}\",\r\n  \"Firstname\": \"{{$randomFirstName}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{$randomLastName}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/dietician",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateDietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 201\",() =>\r",
											"{\r",
											"    pm.response.to.have.status(201);\r",
											"}\r",
											");\r",
											"\r",
											"pm.test(\"Check deticianid present in the response body\",() =>\r",
											"{\r",
											"   var jsonData = JSON.parse(pm.response.text());\r",
											"   pm.environment.set(\"dieticianID_env\",jsonData.id);\r",
											"   pm.environment.set(\"dieticianPwd_env\",jsonData.loginPassword);\r",
											"   pm.environment.set(\"dieticianemail_env\",jsonData.Email);\r",
											"}\r",
											");\r",
											"\r",
											"commontests.postPutHeaderTest();\r",
											"commontests.postPutCommonTests();\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Define the phone number format\r",
											"const phoneNumberFormat = '090#######';\r",
											"\r",
											"// Function to generate random digits, also defining how many digits to generate\r",
											"function getRandomDigit() {\r",
											"  return Math.floor(Math.random() * 10);\r",
											"}\r",
											"\r",
											"// Function to generate a phone number\r",
											"function generatePhoneNumber(format) {\r",
											"  let phoneNumber = '';\r",
											"  for (let i = 0; i < format.length; i++) {\r",
											"    const char = format[i];\r",
											"    if (char === '#') {\r",
											"      phoneNumber += getRandomDigit();\r",
											"    } else {\r",
											"      phoneNumber += char;\r",
											"    }\r",
											"  }\r",
											"  return phoneNumber;\r",
											"}\r",
											"\r",
											"// Set the random phone number as an environment variable\r",
											"pm.environment.set('randomPhoneNumber', generatePhoneNumber(phoneNumberFormat));\r",
											"\r",
											"var random = Math.random().toString(36).substring(2);\r",
											"var useremail = \"siri\"+random+\"@gmail.com\";\r",
											"\r",
											"pm.environment.set(\"email_env\", useremail);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admintoken_env}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{randomPhoneNumber}}\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"Masters\",\r\n  \"Email\": \"{{email_env}}\",\r\n  \"Firstname\": \"{{$randomFirstName}}\",\r\n  \"HospitalCity\": \"Mumbai\",\r\n  \"HospitalName\": \"Mumbai\",\r\n  \"HospitalPincode\": \"111111\",\r\n  \"HospitalStreet\": \"Mumbai\",\r\n  \"Lastname\": \"{{$randomLastName}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/dietician",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{Admintoken_env}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "InvalidEndPoints-AllModules",
			"item": [
				{
					"name": "PatientModule",
					"item": [
						{
							"name": "GetAllpatients with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/patients",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Patients Morbidity Details with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/patients/testReports/{{patientId_env}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patients",
										"testReports",
										"{{patientId_env}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient file by FileId with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/patient/testReport/viewFile/{{Fileid_env}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patient",
										"testReport",
										"viewFile",
										"{{Fileid_env}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete  by patient id Invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commontests.checkstatuscode();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/patients/{{patientId_env}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"patients",
										"{{patientId_env}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Dieticiantoken_env}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authorization-AllModules",
			"item": [
				{
					"name": "User Module",
					"item": [
						{
							"name": "GET_BearerToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(pm.response.text());\r",
											"pm.environment.set(\"Admintoken_env\",jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"Team9@gmail.com\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateDietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 201\",() =>\r",
											"{\r",
											"    pm.response.to.have.status(201);\r",
											"}\r",
											");\r",
											"\r",
											"pm.test(\"Check deticianid present in the response body\",() =>\r",
											"{\r",
											"   var jsonData = JSON.parse(pm.response.text());\r",
											"   pm.environment.set(\"dieticianID_env\",jsonData.id);\r",
											"   pm.environment.set(\"dieticianPwd_env\",jsonData.loginPassword);\r",
											"    pm.environment.set(\"dieticianemail_env\",jsonData.Email);\r",
											"}\r",
											");\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9922990060\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"Masters\",\r\n  \"Email\": \"Dietitianyuc@gmail.com\",\r\n  \"Firstname\": \"Dietitianyuc\",\r\n  \"HospitalCity\": \"Mumbai\",\r\n  \"HospitalName\": \"Mumbai\",\r\n  \"HospitalPincode\": \"111111\",\r\n  \"HospitalStreet\": \"Mumbai\",\r\n  \"Lastname\": \"Dietitianyuc\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"dietician"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{Admintoken_env}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Dietician Module",
					"item": [
						{
							"name": "CreateDietician_BearerToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(pm.response.text());\r",
											"pm.environment.set(\"Dieticiantoken_env\",jsonData.token);\r",
											"\r",
											"console.log(\"Response:\", pm.response.text());///\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Log the environment variables\r",
											"console.log(\"Password:\", pm.environment.get(\"dieticianPwd_env\"));\r",
											"console.log(\"Email:\", pm.environment.get(\"dieticianemail_env\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"password\":\"{{dieticianPwd_env}}\",\r\n\"userLoginEmail\":\"{{dieticianemail_env}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{Admintoken_env}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PatientModule",
					"item": [
						{
							"name": "CreatePatient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 201\",() =>\r",
											"{\r",
											"    pm.response.to.have.status(201);\r",
											"}\r",
											");\r",
											"var jsonData = JSON.parse(pm.response.text());\r",
											"pm.test(\"Check patientid present in the response body\",() =>\r",
											"{\r",
											"   \r",
											"   pm.environment.set(\"patientId_env\",jsonData.patientId);\r",
											"  \r",
											"}\r",
											");\r",
											"\r",
											"// Extract the key fileId from FileMorbidity\r",
											"var fileid = Object.keys(jsonData.FileMorbidity)[0];\r",
											"\r",
											"// Store the key in an environment variable\r",
											"pm.environment.set(\"Fileid_env\", fileid);\r",
											"\r",
											"// Log the key to the console for verification\r",
											"console.log(\"Extracted morbidity key:\", fileid);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Dieticiantoken_env}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": " patientInfo",
											"value": " \n {\n \"FirstName\": \"Adam\",\n \"LastName\": \"Don\",\n \"ContactNumber\": \"2346631230\",\n \"Email\": \"Adam8989@gmail.com\",\n \"Allergy\": \"NONE\",\n \"FoodPreference\": \"Vegan\", \n\"CuisineCategory\":\"Indian\", \n\"DateOfBirth\": \"1989-08-09\"\n }\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/kollu/Downloads/PatientData.pdf"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"commontests = {",
					"    postPutHeaderTest: function() { ",
					"        //test header presence",
					"        pm. test (\"Content-Type header is present\", () => {",
					"        pm.response.to.have.header (\"Content-Type\");",
					"        });",
					"",
					"        //test header content",
					"        pm.test (\"Content-Type header is application/json\", () => {",
					"        pm.expect (pm.response.headers.get ('Content-Type')) .to.include('application/json');",
					"        });",
					"    },",
					"",
					"    postPutCommonTests: function() {",
					"        //test response time",
					"            pm.test(\"Response time is less than 1000ms\", ()=> {",
					"            pm.expect (pm.response.responseTime).to.be.below(500);",
					"            });",
					"    },",
					"",
					"    checkstatuscode: function(){",
					"        var jsonData = pm.response.json(); ",
					"        if (pm.response.code == 200) {",
					"            pm.test(\"Verify the expected status code is 200\", function () {",
					"            pm.response.to.have.status(200);",
					"            });",
					"            pm.test(\"status line \", function () {",
					"            pm.expect(pm.response.status).to.include(\"OK\");",
					"            });",
					"            pm.test(\"Response is a valid JSON object\", function () {",
					"            pm.response.to.be.json;",
					"            });    ",
					"    ",
					"        }else if (pm.response.code == 201) {",
					"            pm.test(\"Verify the expected status code is 201\", function () {",
					"            pm.response.to.have.status(201);",
					"            });       ",
					"    ",
					"        } else if (pm.response.code == 401) {",
					"            pm.test(\"Validate status code 401\", function () {",
					"            pm.response.to.have.status(401);",
					"            });   ",
					"            pm.test(\"Body matches string\", function () {",
					"            console.log(jsonData.error);",
					"            pm.expect(pm.response.text()).to.include(\"Unauthorized\");",
					"            });",
					"",
					"        } else if (pm.response.code == 400) {",
					"            pm.test(\"Validate status code 400\", function () {",
					"            pm.response.to.have.status(400);",
					"            });",
					"            pm.test(\"message: \"+jsonData.message,()=>{",
					"            console.log(\"Message is: \",jsonData.error);",
					"            });",
					"        } else if (pm.response.code == 404) {",
					"            pm.test(\"Validate Status code is 404\", function () {",
					"            pm.response.to.have.status(404);",
					"            });",
					"            pm.test(\"Body matches string\", function () {",
					"            pm.expect(pm.response.text()).to.include(\"Not Found\");",
					"            console.log(\"Message is: \",jsonData.error);",
					"            });",
					"            ",
					"        } else {",
					"            pm.test(\"Unexpected status code: \" + pm.response.code, function () {",
					"            pm.expect(pm.response.code).to.be.oneOf([500,501, 503]); ",
					"            });",
					"            pm.test(\"error: \"+jsonData.error,()=>{",
					"            console.log(\"Error is: \",+jsonData.error);",
					"            });",
					"        }",
					"    }",
					"}",
					""
				]
			}
		}
	]
}