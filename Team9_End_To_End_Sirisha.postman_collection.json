{
	"info": {
		"_postman_id": "647eacaa-6476-4cb2-b813-754b1ed502ac",
		"name": "Team9_End_To_End_Sirisha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32870268",
		"_collection_link": "https://interstellar-star-412911.postman.co/workspace/Team9_TechSquad~c8dd5450-0c41-45e4-b990-1258a95038d8/collection/32870268-647eacaa-6476-4cb2-b813-754b1ed502ac?action=share&source=collection_link&creator=32870268"
	},
	"item": [
		{
			"name": "GET_AdminBearerToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"pm.environment.set(\"Admintoken_env\",jsonData.token);\r",
							"\r",
							"commontests.checkstatuscode();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"Team9@gmail.com\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/login",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateDietician",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commontests.postPutHeaderTest();\r",
							"commontests.postPutCommonTests();\r",
							"commontests.checkstatuscode();\r",
							"\r",
							"if (pm.response.code === 201) { \r",
							"pm.test(\"Check deticianid present in the response body\",() =>\r",
							"{\r",
							"   var jsonData = JSON.parse(pm.response.text());\r",
							"   pm.environment.set(\"dieticianID_env\",jsonData.id);\r",
							"   pm.environment.set(\"dieticianPwd_env\",jsonData.loginPassword);\r",
							"   pm.environment.set(\"dieticianemail_env\",jsonData.Email);\r",
							"   pm.environment.set(\"Firstname_env\",jsonData.Firstname);\r",
							"   pm.environment.set(\"Lastname_env\",jsonData.Lastname);\r",
							"}\r",
							");\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//commontestsScripts.randomPhoneNumberAndEmail();\r",
							"const phoneNumberFormat = '703#######';\r",
							"\r",
							"// Function to generate random digits, also defining how many digits to generate\r",
							"function getRandomDigit() {\r",
							"  return Math.floor(Math.random() * 10);\r",
							"}\r",
							"\r",
							"// Function to generate a phone number\r",
							"function generatePhoneNumber(format) {\r",
							"  let phoneNumber = '';\r",
							"  for (let i = 0; i < format.length; i++) {\r",
							"    const char = format[i];\r",
							"    if (char === '#') {\r",
							"      phoneNumber += getRandomDigit();\r",
							"    } else {\r",
							"      phoneNumber += char;\r",
							"    }\r",
							"  }\r",
							"  return phoneNumber;\r",
							"}\r",
							"\r",
							"// Set the random phone number as an environment variable\r",
							"pm.environment.set('randomPhoneNumber', generatePhoneNumber(phoneNumberFormat));\r",
							"\r",
							"var random = Math.random().toString(36).substring(2);\r",
							"var useremail = \"team9\"+random+\"@gmail.com\";\r",
							"\r",
							"pm.environment.set(\"email_env\", useremail);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Admintoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ContactNumber\": \"{{randomPhoneNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{email_env}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/dietician",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"dietician"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateDietician_BearerToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"pm.environment.set(\"Dieticiantoken_env\",jsonData.token);\r",
							"\r",
							"console.log(\"Response:\", pm.response.text());///\r",
							"\r",
							"commontests.checkstatuscode();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Log the environment variables\r",
							"console.log(\"Password:\", pm.environment.get(\"dieticianPwd_env\"));\r",
							"console.log(\"Email:\", pm.environment.get(\"dieticianemail_env\"));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"password\":\"{{dieticianPwd_env}}\",\r\n\"userLoginEmail\":\"{{dieticianemail_env}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/login",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateDietician",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commontests.postPutHeaderTest();\r",
							"commontests.postPutCommonTests();\r",
							"commontests.checkstatuscode();\r",
							"\r",
							"var jsonData = pm.response.json(); \r",
							"if (pm.response.code === 200) { \r",
							"pm.test(\"Verified fields(Lastname and Firstname) present in the response body\",() =>\r",
							"{\r",
							"   var jsonData = JSON.parse(pm.response.text());\r",
							"   pm.environment.set(\"Firstname_env\",jsonData.Firstname);\r",
							"   pm.environment.set(\"Lastname_env\",jsonData.Lastname);\r",
							"  \r",
							"}\r",
							");\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // Define the phone number format\r",
							"// const phoneNumberFormat = '703#######';\r",
							"\r",
							"// // Function to generate random digits, also defining how many digits to generate\r",
							"// function getRandomDigit() {\r",
							"//   return Math.floor(Math.random() * 10);\r",
							"// }\r",
							"\r",
							"// // Function to generate a phone number\r",
							"// function generatePhoneNumber(format) {\r",
							"//   let phoneNumber = '';\r",
							"//   for (let i = 0; i < format.length; i++) {\r",
							"//     const char = format[i];\r",
							"//     if (char === '#') {\r",
							"//       phoneNumber += getRandomDigit();\r",
							"//     } else {\r",
							"//       phoneNumber += char;\r",
							"//     }\r",
							"//   }\r",
							"//   return phoneNumber;\r",
							"// }\r",
							"\r",
							"// // Set the random phone number as an environment variable\r",
							"// pm.environment.set('randomPhoneNumber', generatePhoneNumber(phoneNumberFormat));\r",
							"\r",
							"// var random = Math.random().toString(36).substring(2);\r",
							"// var useremail = \"TeamNine\"+random+\"@gmail.com\";\r",
							"\r",
							"// pm.environment.set(\"email_env\", useremail);\r",
							"\r",
							"commontestsScripts.randomPhoneNumberAndEmail();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Admintoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ContactNumber\": \"{{randomPhoneNumber}}\",\r\n  \"DateOfBirth\": \"{{updateDateOfBirth}}\",\r\n  \"Education\": \"{{updateEducation}}\",\r\n  \"Email\": \"{{email_env}}\",\r\n  \"Firstname\": \"{{updateFirstname}}\",\r\n  \"HospitalCity\": \"{{updateHospitalCity}}\",\r\n  \"HospitalName\": \"{{updateHospitalName}}\",\r\n  \"HospitalPincode\": \"{{updateHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{updateHospitalStreet}}\",\r\n  \"Lastname\": \"{{updateLastname}}\"\r\n \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/dietician/{{dieticianID_env}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"dietician",
						"{{dieticianID_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ditecian By ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commontests.postPutHeaderTest();\r",
							"commontests.postPutCommonTests();\r",
							"commontests.checkstatuscode();\r",
							"\r",
							"if (pm.response.code === 200) { \r",
							"pm.test(\"validating json fields\",() =>\r",
							"{\r",
							"   var jsonData = JSON.parse(pm.response.text());\r",
							"   pm.expect(jsonData.Firstname).to.eql(pm.environment.get(\"Firstname_env\"));\r",
							"   pm.expect(jsonData.Lastname).to.eql(pm.environment.get(\"Lastname_env\"));\r",
							"}\r",
							");\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Admintoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/dietician/{{dieticianID_env}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"dietician",
						"{{dieticianID_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Ditecian Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commontests.postPutHeaderTest();\r",
							"commontests.postPutCommonTests();\r",
							"\r",
							"pm.test(\"Status code 200\",() =>\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"Values of JSON fields\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    //pm.expect(jsonData.Id).to.eql(pm.environment.id);\r",
							"    // Assuming the response is an array\r",
							"    if (Array.isArray(jsonData.data)) {\r",
							"    let numberOfRecords = jsonData.data.length;\r",
							"    console.log(\"Number of records:\", numberOfRecords);\r",
							"    }\r",
							"else {\r",
							"    console.error(\"Response data is not an array or 'data' property is missing.\");\r",
							"}\r",
							"\r",
							"    });\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Admintoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/dietician",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"dietician"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Patient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commontests.checkstatuscode();\r",
							"\r",
							"var jsonData = JSON.parse(pm.response.text());\r",
							"if (pm.response.code === 201) {\r",
							"pm.test(\"Check patientID present in the response body\",() =>\r",
							"{\r",
							"      pm.environment.set(\"PatientID_env\",jsonData.patientId);\r",
							" \r",
							"}\r",
							");\r",
							"}\r",
							"\r",
							"var fileid = Object.keys(jsonData.FileMorbidity)[0];\r",
							"\r",
							"\r",
							"pm.environment.set(\"Fileid_env\", fileid);\r",
							"\r",
							"//console.log(pm.response.text());\r",
							"\r",
							"\r",
							"//console.log(\"Extracted morbidity key:\", fileid);\r",
							"//console.log(\"JSONDATA:\", jsonData.text());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const phoneNumberFormat = '090#######';\r",
							"\r",
							"// Function to generate random digits, also defining how many digits to generate\r",
							"function getRandomDigit() {\r",
							"  return Math.floor(Math.random() * 10);\r",
							"}\r",
							"\r",
							"// Function to generate a phone number\r",
							"function generatePhoneNumber(format) {\r",
							"  let phoneNumber = '';\r",
							"  for (let i = 0; i < format.length; i++) {\r",
							"    const char = format[i];\r",
							"    if (char === '#') {\r",
							"      phoneNumber += getRandomDigit();\r",
							"    } else {\r",
							"      phoneNumber += char;\r",
							"    }\r",
							"  }\r",
							"  return phoneNumber;\r",
							"}\r",
							"\r",
							"// Set the random phone number as an environment variable\r",
							"pm.environment.set('Patient_randomPhoneNumber', generatePhoneNumber(phoneNumberFormat));\r",
							"\r",
							"var random = Math.random().toString(36).substring(2);\r",
							"var useremail = \"siri\"+random+\"@gmail.com\";\r",
							"\r",
							"pm.environment.set(\"Patient_email_env\", useremail);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Dieticiantoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "patientInfo",
							"value": "   {\n   \"FirstName\":\"{{P_FirstName}}\",\n   \"LastName\":\"{{P_LastName}}\",\n   \"ContactNumber\":\"{{Patient_randomPhoneNumber}}\",\n   \"Email\":\"{{Patient_email_env}}\",\n   \"Allergy\":\"{{P_Allergy}}\",\n   \"FoodPreference\":\"{{P_FoodPreference}}\",\n   \"CuisineCategory\":\"{{P_CuisineCategory}}\",\n   \"DateOfBirth\":\"{{P_DateOfBirth}}\"\n    }",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/kollu/Downloads/PatientData.pdf"
						},
						{
							"key": "FirstName",
							"value": "{{P_FirstName}}",
							"type": "text"
						},
						{
							"key": "LastName",
							"value": "{{P_LastName}}",
							"type": "text"
						},
						{
							"key": "ContactNumber",
							"value": "{{P_ContactNumber}}",
							"type": "text"
						},
						{
							"key": "Email",
							"value": "{{P_Email}}",
							"type": "text"
						},
						{
							"key": "Allergy",
							"value": "{{P_Allergy}}",
							"type": "text"
						},
						{
							"key": "FoodPreference",
							"value": "{{P_FoodPreference}}",
							"type": "text"
						},
						{
							"key": "CuisineCategory",
							"value": "{{P_CuisineCategory}}",
							"type": "text"
						},
						{
							"key": "DateOfBirth",
							"value": "{{P_DateOfBirth}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdatePatient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commontests.postPutHeaderTest();\r",
							"commontests.postPutCommonTests();\r",
							"commontests.checkstatuscode();\r",
							"\r",
							"var jsonData = pm.response.json(); \r",
							"if (pm.response.code === 200) { \r",
							"pm.test(\"Verified updated fields(Lastname and Firstname) present in the response body\",() =>\r",
							"{\r",
							"   var jsonData = JSON.parse(pm.response.text());\r",
							"   pm.environment.set(\"Firstname_env\",jsonData.Firstname);\r",
							"   pm.environment.set(\"Lastname_env\",jsonData.Lastname);\r",
							"  \r",
							"}\r",
							");\r",
							"}\r",
							"pm.test(\"Verified patient Id is same\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.patientId).to.eql(pm.environment.get(\"PatientID_env\"));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Dieticiantoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": " patientInfo",
							"value": "   {\n   \"FirstName\":\"{{P_updateFirstName}}\",\n   \"LastName\":\"{{P_updateLastName}}\",\n   \"ContactNumber\":\"{{Patient_randomPhoneNumber}}\",\n   \"Email\":\"{{Patient_email_env}}\",\n   \"Allergy\":\"{{P_Allergy}}\",\n   \"FoodPreference\":\"{{P_FoodPreference}}\",\n   \"CuisineCategory\":\"{{P_CuisineCategory}}\",\n   \"DateOfBirth\":\"{{P_DateOfBirth}}\"\n    }",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1ef5292e-5528-4cb0-8156-aaa78a80f641"
						},
						{
							"key": "FirstName",
							"value": "{{P_updateFirstName}}",
							"type": "text"
						},
						{
							"key": "LastName",
							"value": "{{P_updateLastName}}",
							"type": "text"
						},
						{
							"key": "ContactNumber",
							"value": "{{Patient_randomPhoneNumber}}",
							"type": "text"
						},
						{
							"key": "Email",
							"value": "{{Patient_email_env}}",
							"type": "text"
						},
						{
							"key": "Allergy",
							"value": "{{P_Allergy}}",
							"type": "text"
						},
						{
							"key": "FoodPreference",
							"value": "{{P_FoodPreference}}",
							"type": "text"
						},
						{
							"key": "CuisineCategory",
							"value": "{{P_CuisineCategory}}",
							"type": "text"
						},
						{
							"key": "DateOfBirth",
							"value": "{{P_DateOfBirth}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseUrl}}/patient/{{PatientID_env}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"patient",
						"{{PatientID_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get TestReports",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the ReferenceError by moving the jsonData declaration inside the test function\r",
							"pm.test(\"Values of JSON fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.fileId).to.eql(pm.environment.fileid);\r",
							"    pm.expect(Array.isArray(responseJson)).to.be.true;\r",
							"    pm.response.json().forEach((report) => {\r",
							"        pm.expect(report).to.be.an('object');\r",
							"        pm.expect(report).to.have.property('fileId');\r",
							"        pm.expect(report).to.have.property('fileName');\r",
							"        pm.expect(report).to.have.property('uploadDate');\r",
							"        pm.expect(report).to.have.property('morbidConditions').to.be.an('object');\r",
							"        pm.expect(report.morbidConditions).to.have.property('HbA1c');\r",
							"        pm.expect(report.morbidConditions).to.have.property('Average Glucose');\r",
							"        pm.expect(report.morbidConditions).to.have.property('Fasting Glucose');\r",
							"        pm.expect(report.morbidConditions).to.have.property('T3');\r",
							"        pm.expect(report.morbidConditions).to.have.property('T4');\r",
							"        pm.expect(report.morbidConditions).to.have.property('TSH');\r",
							"        pm.expect(report).to.have.property('morbidConditionStr');\r",
							"    });\r",
							"    \r",
							"   \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Dieticiantoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/patient/testReports/{{PatientID_env}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"patient",
						"testReports",
						"{{PatientID_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get AllPatients",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commontests.checkstatuscode();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Dieticiantoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{BaseUrl}}/patient",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"patient"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get PatientByFileID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commontests.checkstatuscode();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Dieticiantoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/patient/testReports/viewFile/{{Fileid_env}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"patient",
						"testReports",
						"viewFile",
						"{{Fileid_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeletePatient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// commontests.postPutCommonTests();\r",
							"commontests.checkstatuscode();\r",
							"\r",
							"pm.environment.unset(\"PatientID_env\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Dieticiantoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/{{PatientID_env}}",
					"protocol": "https",
					"host": [
						"dietician-july-api-hackathon-80f2590665cc",
						"herokuapp",
						"com"
					],
					"path": [
						"dietician",
						"patient",
						"{{PatientID_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Dietician",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.unset(\"dieticianID_env\");\r",
							"pm.environment.unset(\"Firstname_env\");\r",
							"pm.environment.unset(\"Lastname_env\");\r",
							"commontests.checkstatuscode();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Admintoken_env}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/dietician/{{dieticianID_env}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"dietician",
						"{{dieticianID_env}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commontestsScripts = {\r",
					"randomPhoneNumberAndEmail: function() {\r",
					"// Define the phone number format\r",
					"const phoneNumberFormat = '703#######';\r",
					"\r",
					"// Function to generate random digits, also defining how many digits to generate\r",
					"function getRandomDigit() {\r",
					"  return Math.floor(Math.random() * 10);\r",
					"}\r",
					"\r",
					"// Function to generate a phone number\r",
					"function generatePhoneNumber(format) {\r",
					"  let phoneNumber = '';\r",
					"  for (let i = 0; i < format.length; i++) {\r",
					"    const char = format[i];\r",
					"    if (char === '#') {\r",
					"      phoneNumber += getRandomDigit();\r",
					"    } else {\r",
					"      phoneNumber += char;\r",
					"    }\r",
					"  }\r",
					"  return phoneNumber;\r",
					"}\r",
					"\r",
					"// Set the random phone number as an environment variable\r",
					"pm.environment.set('randomPhoneNumber', generatePhoneNumber(phoneNumberFormat));\r",
					"\r",
					"var random = Math.random().toString(36).substring(2);\r",
					"var useremail = \"TeamNine\"+random+\"@gmail.com\";\r",
					"\r",
					"pm.environment.set(\"email_env\", useremail);\r",
					"\r",
					"\r",
					"}\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commontests = {\r",
					"postPutHeaderTest: function() { \r",
					"    //test header presence\r",
					"    pm. test (\"Content-Type header is present\", () => {\r",
					"    pm.response.to.have.header (\"Content-Type\");\r",
					"    });\r",
					"\r",
					"    //test header content\r",
					"    pm.test (\"Content-Type header is application/json\", () => {\r",
					"    pm.expect (pm.response.headers.get ('Content-Type')) .to.include('application/json');\r",
					"    });\r",
					"},\r",
					"\r",
					"postPutCommonTests: function() {\r",
					"    //test response time\r",
					"        pm.test(\"Response time is less than 1000ms\", ()=> {\r",
					"        pm.expect (pm.response.responseTime).to.be.below(600);\r",
					"        });\r",
					"    },\r",
					"\r",
					"\r",
					"checkstatuscode: function(){\r",
					"\r",
					"    if (pm.response.code === 200) {\r",
					"    pm.test(\"Verify the expected status code is 200\", function () {\r",
					"        pm.response.to.have.status(200);\r",
					"    });\r",
					"  \r",
					"}else if (pm.response.code === 201) {\r",
					"    pm.test(\"Verify the expected status code is 201\", function () {\r",
					"        pm.response.to.have.status(201);\r",
					"    });\r",
					"       \r",
					"\r",
					"} else if (pm.response.code === 401) {\r",
					"    pm.test(\"Validate status code 401\", function () {\r",
					"        pm.response.to.have.status(401);\r",
					"    });\r",
					"    var jsonData = pm.response.json();\r",
					"    pm.test(\"message: \"+jsonData.message,()=>{\r",
					"    console.log(\"Message is: \",jsonData.message);\r",
					"    \r",
					"});\r",
					"} else if (pm.response.code === 400) {\r",
					"    pm.test(\"Validate status code 400\", function () {\r",
					"        pm.response.to.have.status(400);\r",
					"    });\r",
					"    var jsonData = pm.response.json();\r",
					"    pm.test(\"message: \"+jsonData.message,()=>{\r",
					"    console.log(\"Message is: \",jsonData.message);\r",
					"   \r",
					"});\r",
					"}else if (pm.response.code === 404) {\r",
					"    pm.test(\"Validate Status code is 404\", function () {\r",
					"        pm.response.to.have.status(404);\r",
					"    });\r",
					"    var jsonData = pm.response.json();\r",
					"    pm.test(\"message: \"+jsonData.message,()=>{\r",
					"    console.log(\"Message is: \",jsonData.message);\r",
					"   \r",
					"});\r",
					"} else {\r",
					"    pm.test(\"Unexpected status code: \" + pm.response.code, function () {\r",
					"        pm.expect(pm.response.code).to.be.oneOf([500,501, 503]); \r",
					"    });\r",
					"    pm.test(\"error: \"+jsonData.error,()=>{\r",
					"    console.log(\"Error is: \",jsonData.error);\r",
					"    \r",
					"});\r",
					"}\r",
					"}\r",
					"\r",
					"\r",
					"}\r",
					"\r",
					""
				]
			}
		}
	]
}