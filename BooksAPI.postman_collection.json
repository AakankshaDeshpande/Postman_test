{
	"info": {
		"_postman_id": "ef2af3b1-efea-4e10-b419-b90f32ce4224",
		"name": "BooksAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34648013"
	},
	"item": [
		{
			"name": "Create Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"var token = jsonData.token;\r",
							"pm.environment.set(\"token\", token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"clientName\": \"BookAPI\",\r\n\"clientEmail\": \"Token@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Books_URL}}/api-clients",
					"host": [
						"{{Books_URL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Ensure the response status is 200\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Ensure the response is an array\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Iterate over each book and validate the fields\r",
							"pm.test(\"Validate each book object\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    jsonData.forEach(function (book) {\r",
							"        // Check if book has required fields\r",
							"        pm.expect(book).to.have.property(\"id\");\r",
							"        pm.expect(book).to.have.property(\"name\");\r",
							"        pm.expect(book).to.have.property(\"type\");\r",
							"        pm.expect(book).to.have.property(\"available\");\r",
							"        \r",
							"        // Validate the type of each field\r",
							"        pm.expect(book.id).to.be.a('number');\r",
							"        pm.expect(book.name).to.be.a('string');\r",
							"        pm.expect(book.type).to.be.oneOf(['fiction', 'non-fiction']);\r",
							"        pm.expect(book.available).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Example: Validate specific field values (optional)\r",
							"pm.test(\"Validate specific field values\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Example: Check if the first book's name is \"The Russian\"\r",
							"    pm.expect(jsonData[0].name).to.equal(\"The Russian\");\r",
							"    pm.expect(jsonData[0].available).to.be.true;\r",
							"    \r",
							"    // Example: Check if the third book is available\r",
							"    pm.expect(jsonData[2].available).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Set in collection variable field values\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Example: Check if the first book's name is \"The Russian\"\r",
							"    pm.expect(jsonData[0].name).to.equal(\"The Russian\");\r",
							"    pm.expect(jsonData[0].available).to.be.true;\r",
							"    \r",
							"    // Example: Check if the third book is available\r",
							"    pm.expect(jsonData[2].available).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Books_URL}}/books",
					"host": [
						"{{Books_URL}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Ensure the response status is 200\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Ensure the response is an object\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Validate the presence of the 'status' field\r",
							"pm.test(\"Response has 'status' field\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('status');\r",
							"});\r",
							"\r",
							"// Validate the value of the 'status' field\r",
							"pm.test(\"Status field value is 'OK'\",() => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal('OK');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Books_URL}}/status",
					"host": [
						"{{Books_URL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_Single_Book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Ensure the response status is 200\r",
							"pm.test(\"Status code is 200\", () =>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Ensure the response is an object\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Validate the presence of each field\r",
							"pm.test(\"Response has all required fields\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData).to.have.property('isbn');\r",
							"    pm.expect(jsonData).to.have.property('type');\r",
							"    pm.expect(jsonData).to.have.property('price');\r",
							"    pm.expect(jsonData).to.have.property('current-stock');\r",
							"    pm.expect(jsonData).to.have.property('available');\r",
							"});\r",
							"\r",
							"// Validate the type of each field\r",
							"pm.test(\"Field types are correct\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.author).to.be.a('string');\r",
							"    pm\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Books_URL}}/books/1",
					"host": [
						"{{Books_URL}}"
					],
					"path": [
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit_order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\",() =>\r",
							"{\r",
							"    pm.response.to.have.status(201);\r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"Check if orderid present in the response body\",() =>\r",
							"{\r",
							"   var jsonData = JSON.parse(pm.response.text());\r",
							"   pm.environment.set(\"orderidBooksAPI_env\",jsonData.orderId);\r",
							"}\r",
							");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "838eb967081e07b5fdbfa3610da23fdc06da437c2772c752a39086d2c432a3fd",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"bookId\": 1, \r\n    \"customerName\": \"John\"\r\n     }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Books_URL}}/orders",
					"host": [
						"{{Books_URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_ALL_Orders",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "838eb967081e07b5fdbfa3610da23fdc06da437c2772c752a39086d2c432a3fd",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Books_URL}}/orders",
					"host": [
						"{{Books_URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_Single_Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code 200\",() =>\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"Check orderid present in the response body\",() =>\r",
							"{\r",
							"   var jsonData = JSON.parse(pm.response.text());\r",
							"   pm.expect(jsonData.id).to.eql(pm.environment.get(\"orderidBooksAPI_env\"));\r",
							"   \r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"Field values are correct\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Example validations for specific values\r",
							"   \r",
							"    pm.expect(jsonData.bookId).to.equal(1);\r",
							"   // pm.expect(jsonData.customerName).to.equal(\"Johnnny\");\r",
							"   \r",
							"   \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "838eb967081e07b5fdbfa3610da23fdc06da437c2772c752a39086d2c432a3fd",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Books_URL}}/orders/{{orderidBooksAPI_env}}",
					"host": [
						"{{Books_URL}}"
					],
					"path": [
						"orders",
						"{{orderidBooksAPI_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH_Order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "838eb967081e07b5fdbfa3610da23fdc06da437c2772c752a39086d2c432a3fd",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"bookId\": 1, \r\n    \"customerName\": \"Johnnny\"\r\n     }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Books_URL}}/orders/{{orderidBooksAPI_env}}",
					"host": [
						"{{Books_URL}}"
					],
					"path": [
						"orders",
						"{{orderidBooksAPI_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE_OrderID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.environment.unset(\"orderidBooksAPI_env\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "838eb967081e07b5fdbfa3610da23fdc06da437c2772c752a39086d2c432a3fd",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Books_URL}}/orders/{{orderidBooksAPI_env}}",
					"host": [
						"{{Books_URL}}"
					],
					"path": [
						"orders",
						"{{orderidBooksAPI_env}}"
					]
				}
			},
			"response": []
		}
	]
}